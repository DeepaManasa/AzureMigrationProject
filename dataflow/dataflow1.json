{
	"name": "dataflow1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_fruaddetection",
						"type": "DatasetReference"
					},
					"name": "source1"
				},
				{
					"name": "source2"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_dataflow",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "derivedColumn1"
				},
				{
					"name": "MapDrifted1",
					"description": "Creates an explicit mapping for each drifted column"
				},
				{
					"name": "select1"
				}
			],
			"scriptLines": [
				"source(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     inferDriftedColumnTypes: true,",
				"     ignoreNoFilesFound: false) ~> source1",
				"source(allowSchemaDrift: true,",
				"     validateSchema: false) ~> source2",
				"source1 derive(Region = case(\r",
				"    byName('location_country') == 'USA', 'North America',\r",
				"    byName('location_country') == 'Canada', 'North America',\r",
				"    byName('location_country') == 'Belgium', 'Europe',\r",
				"    byName('location_country') == 'Switzerland', 'Europe',\r",
				"    'Other'\r",
				"),",
				"          transactiondate = split(byName('transaction_timestamp'),\" \")[1],",
				"          transactiontime = split(byName('transaction_timestamp'),\" \")[2]) ~> derivedColumn1",
				"derivedColumn1 derive(transaction_id = toShort(byName('transaction_id')),",
				"          user_id = toShort(byName('user_id')),",
				"          transaction_amount = toDouble(byName('transaction_amount')),",
				"          transaction_timestamp = toString(byName('transaction_timestamp')),",
				"          merchant_category = toString(byName('merchant_category')),",
				"          device_id = toString(byName('device_id')),",
				"          ip_address = toString(byName('ip_address')),",
				"          is_fraudulent = toBoolean(byName('is_fraudulent')),",
				"          location_country = toString(byName('location_country')),",
				"          location_city = toString(byName('location_city'))) ~> MapDrifted1",
				"MapDrifted1 select(mapColumn(",
				"          Region,",
				"          transactiondate,",
				"          transactiontime,",
				"          transaction_id,",
				"          user_id,",
				"          transaction_amount,",
				"          merchant_category,",
				"          device_id,",
				"          ip_address,",
				"          is_fraudulent,",
				"          location_country,",
				"          location_city",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          transaction_id as string,",
				"          user_id as string,",
				"          transaction_amount as string,",
				"          transaction_timestamp as string,",
				"          merchant_category as string,",
				"          device_id as string,",
				"          ip_address as string,",
				"          is_fraudulent as string,",
				"          location_country as string,",
				"          location_city as string,",
				"          Region as string",
				"     ),",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink1"
			]
		}
	}
}